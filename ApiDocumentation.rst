 * Data Structures
 * Kernel System Calls
  * Architecture-Independent Object Invocations
  * Architecture-dependent Object Invocations
   * ARM
   * IA32
 * Error Codes

----
== Data Structures ==
=== seL4_MessageInfo_t ===
=== seL4_IPCBuffer ===
== System Calls ==
The seL4 kernel provides a message-passing service for communication between threads and kernel-provided services. Logically, the kernel provides set of system calls ???

=== seL4_Send ===
''seL4_Send()'' delivers a message through the named capability. If the invoked capability is an endpoint, and no receiver is ready to receive the message immediately, the sending thread will block until the message can be delivered. No error code or response will be returned by the receiving object.
||Type ||Name ||Description ||


||seL4_CPtr ||dest ||The capability to be invoked. ||
||seL4_MessageInfo_t ||msgInfo ||The messageinfo structure for the IPC. ||




Return value: This method does not return anything.

=== seL4_Recv ===
''seL4_Recv()'' is used by a thread to receive messages through endpoints or notifications. If no sender or notification is pending, the caller will block until a message or notification can be delivered. This system call works only on Endpoint or Notification capabilities, raising a fault when attempted with other capability types.
||Type ||Name ||Description ||
||seL4_CPtr ||src ||The capability to be invoked. ||
||seL4_Word* ||sender ||The address to write sender information to. The sender information is the badge of the endpoint capability that was invoked by the sender, or the notification word of the notification object that was signalled. This parameter is ignored if NULL. ||




Return value: A seL4_MessageInfo_t structure.

=== seL4_Call ===
''seL4_Call()'' combines ''seL4_Send()'' and ''seL4_Recv()''. The ''seL4 Call()'' operation exists not only for efficiency reasons. It differs from seL4_Send() immediately followed by seL4_Recv() in two ways:  1. the single-use reply capability is created to establish a reply channel with minimal trust;  2. the transition from send to recv phase is atomic, meaning it cannot be preempted, and the receiver can reply without any risk of blocking.  When invoking capabilities to kernel services, using seL4_Call() allows the kernel to return an error code or other response through the reply message.
||Type ||Name ||Description ||
||seL4_CPtr ||dest ||The capability to be invoked. ||
||seL4_MessageInfo_t ||msgInfo ||The messageinfo structure for the IPC. ||




Return value: A seL4_MessageInfo_t structure.

=== seL4_Reply ===
seL4_Reply() is used to respond to a seL4_Call(), using the reply capability generated by the seL4_Call() system call and stored in the replying thread’s TCB. It delivers the message to the thread that invoked the seL4_Call(), waking it in the process.
||Type ||Name ||Description ||
||seL4_MessageInfo_t ||msgInfo ||The messageinfo structure for the IPC. ||




Return value: This method does not return anything.

=== seL4_ReplyRecv ===
seL4_ReplyRecv() combines seL4_Reply() and seL4_Recv(). It exists mostly for efficiency reasons: the common case of replying to a request and waiting for the next can be performed in a single kernel system call instead of two. The transition from the reply to the receive phase is also atomic.
||<tablewidth="200px">Type ||Name ||Description ||
|| || || ||
|| || || ||




=== seL4_NBSend ===
seL4_NBSend() performs a polling send on an endpoint. It is similar to seL4_Send(), except that it is guaranteed not to block. If the message cannot be delivered immediately, the message is silently dropped. Like seL4_Send(), no error code or response will be returned.
||<tablewidth="200px">Type ||Name ||Description ||
|| || || ||
|| || || ||




=== seL4_NBRecv ===
seL4_NBRecv() is used by a thread to check for signals pending on a notification object or messages pending on an endpoint without blocking.
||Type ||Name ||Description ||
||seL4_CPtr ||src ||The capability to be invoked. ||
||seL4_Word* ||sender ||The address to write sender information to. The sender information is the badge of the endpoint capability that was invoked by the sender, or the notification word of the notification object that was signalled. This parameter is ignored if NULL. ||




Return value: A seL4_MessageInfo_t structure.

=== seL4_Yield ===
seL4_Yield() forfeits the remainder of the calling thread’s timeslice and causes invocation of the kernel’s scheduler. If there are no other runnable threads with the same priority as the caller, the calling thread will immediately be scheduled with a fresh timeslice.

Return value: This method does not return anything.

----
