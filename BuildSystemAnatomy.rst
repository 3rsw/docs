= Anatomy of the Build System =
The following files are the components of a project repository that are part of the build system (as opposed to code and tools related to the project):

 * '''[[#config|.config]]''' - Your current configuration (auto-generated)
 * '''apps/'''       
  * '''[[#appskbuild|Kbuild]]''' - Application targets and dependencies
  * '''[[#kconfig|Kconfig]]''' - Applications menu
  * '''myapp/'''
   * '''[[#kconfig|Kconfig]]''' - Myapp-specific settings
   * '''[[#appsmyappmakefile|Makefile]]''' - How to build Myapp
 * '''configs/*''' - Pre-made configurations for the project
 * '''[[#kconfig|Kconfig]]''' - Top-level menu
 * '''kernel/Makefile''' - How to build seL4
 * libs/
  * '''[[#libskbuild|Kbuild]]''' - Library targets and dependencies
  * '''[[#kconfig|Kconfig]]''' - Libraries menu
  * libfoo/
   * '''[[#kconfig|Kconfig]]''' - Libfoo-specific settings
   * '''[[#libfoomakefile|Makefile]]''' - How to build Libfoo
 * '''[[#makefile|Makefile]]''' - Top-level build specialisation
 * '''[[#makefileflags|Makefile.flags]]''' - Top-level build tuning
 * tools/common/
  * '''[[#commonmk|common.mk]]''' - Boiler plate for building applications/libraries
  * '''[[#kconfig|Kconfig]]''' - Menu options for toolchains and other common settings
  * '''[[#projectmk|project-arm.mk]]''' - ARM-specific boiler plate for a top-level build
  * '''[[#projectmk|project-ia32.mk]]''' - IA32-specific boiler plate for a top-level build
  * '''[[#projectmk|project.mk]]''' - Architecture-independent boiler plate for a  top-level build
  * '''[[#makefileflags|Makefile.flags]]''' - Shared build system tuning
  * '''kbuild/*''' - Kbuild from the Linux source tree. For documentation, refer to the Kbuild mailing list.

<<Anchor(config)>>'''.config''' is autogenerated by running make some_default_config or make menuconfig. In general, you shouldn't modify this file manually, but the syntax is pretty obvious if you want to. As noted below, it is not recommended to touch the comments in this file. They are parsed by the build system and "malformed" comments can cause strange and mysterious errors.

<<Anchor(appskbuild)>>'''apps/Kbuild''' needs to fill the apps-y variable with the targets of the applications to be built. To do this you can reference the CONFIG_-prefixed variables from Kconfig. A typical apps/Kbuild will look something like the following:
{{{
apps-$(CONFIG_MY_APP) += myapp
 
hello: libfoo
}}}
If your application has more complicated dependencies, for example if it depends on libbar only when the MYAPP_EXTRA_FUNCTIONALITY variable is selected, you can use the following pattern:
{{{
apps-$(CONFIG_MY_APP) += myapp
 
hello-y = libfoo
hello-$(CONFIG_MYAPP_EXTRA_FUNCTIONALITY) += libbar
hello: $(hello-y)
}}}

<<Anchor(kconfig)>>The Kconfig files ('''Kconfig, apps/Kconfig, apps/myapp/Kconfig, libs/Kconfig, libs/libfoo/Kconfig, tools/common/Kconfig''') describe the structure of the menu you are presented with when you type make menuconfig. The syntax of these files is described at http://kernel.org/doc/Documentation/kbuild/kconfig-language.txt and they are broken up in the obvious way; that is, apps/Kconfig contains settings common to all applications in your project, libs/libfoo/Kconfig contains settings specific to libfoo, ... The Kconfig files together determine the build configuration process that is described in more detail below.

<<Anchor(appsmyappmakefile)>>Your application Makefile, '''apps/myapp/Makefile''', should populate a set of variables and then include common.mk. It will typically look something like the following:
{{{
TARGETS := $(notdir $(SOURCE_DIR)).bin
 
CFILES   := $(patsubst $(SOURCE_DIR)/%,%,$(wildcard $(SOURCE_DIR)/src/*.c))
ASMFILES := $(patsubst $(SOURCE_DIR)/%,%,$(wildcard $(SOURCE_DIR)/crt/arch-$(ARCH)/crt0.S))
 
LIBS := sel4c sel4 sel4rootserver sel4platsupport
 
include $(SEL4_COMMON)/common.mk
}}}
TARGETS should contain the list of output files that this application needs built. CFILES and ASMFILES list the C and assembly sources of your application, respectively. LIBS lists the libraries this application will be linked against (without their "lib" prefix). You can also use your Makefile to modify the flags that are passed to the compiler or the linker when building your application. To do this, modify the variables CFLAGS and LDFLAGS, respectively. For example, you can use "LDFLAGS += -T path/to/linker.lds" to use a custom linker script for your application or "CFLAGS := $(filter-out -Wall,$(CFLAGS))" to turn off compiler warnings for your application. Note that these modifications should be added '''after''' including common.mk.

<<Anchor(libskbuild)>> Like apps/Kbuild describes top-level application dependencies, '''libs/Kbuild''' describes top-level library dependencies. Similarly, it fills the variable libs-y with the libraries to be built. A typical libs/Kbuild would look like:
{{{
libs-$(CONFIG_LIB_FOO) += libfoo
libs-$(CONFIG_LIB_BAR) += libbar
 
libfoo: common
libbar: common libfoo
}}}

<<Anchor(libfoomakefile)>>The Makefile for a particular library, '''libs/libfoo/Makefile''', should just contain some variable configuration and then include common.mk. Note that by using generic environment variables you can often use the following template with no modification for your library:
{{{
# Library archive(s) that will be built.
TARGETS := $(notdir ${SOURCE_DIR}).a
 
# Source files required to build the target.
CFILES := $(patsubst $(SOURCE_DIR)/%,%,$(wildcard ${SOURCE_DIR}/src/*.c))
ASMFILES := $(patsubst $(SOURCE_DIR)/%,%,$(wildcard ${SOURCE_DIR}/src/*.S))
 
# Header files/directories this library provides.
HDRFILES := $(wildcard ${SOURCE_DIR}/include/*)
 
include $(SEL4_COMMON)/common.mk
}}}

You can modify the compiler or linker flags applied when building your library by modifying the NK_CFLAGS or NK_LDFLAGS variable respectively. The process for doing this is identical to that for apps/myapp/Makefile described above.

<<Anchor(makefile)>>Something that map be unexpected at first is that you don't need to provide any project-specific targets in your top-level Makefile. Generally this file just needs to make app-images the default target and include project.mk. It's possible you may want to override the default (by defining a target before including project.mk) or provide some external targets of your own (after including project.mk). You will most likely just want to mimic the content of the file from the reference examples:
{{{
# app-images is provided in project.mk.
all: app-images
 
include tools/common/project.mk
 
# Extra project-specific targets.
simulate-kzm:
    qemu-arm -nographic -M kzm -kernel images/hello-image-arm-imx31
}}}

<<Anchor(projectmk)>>'''tools/common/project.mk''' contains some generic targets and supporting infrastructure for building the various components of your system. It is from this Makefile that the application and library Makefiles are invoked. The architecture specific elements of this are contained in '''tools/common/project-arm.mk''' and '''tools/common/project-ia32.mk'''. Your top-level Makefile should import tools/common/project.mk to take advantage of the build system support.


<<Anchor(commonmk)>>'''tools/common/common.mk''' is the equivalent of tools/common/project.mk for the application-/library-level compilation (as opposed to top-level). This probably won't make much sense unless you are familiar with the two-stage build process that is being invoked when you type "make", but you generally won't need to concern yourself with the inner workings of this file anyway. This file contains a collection of generic compiler flags and targets shared between all projects. It has evolved over time (in some instances in response to bugs in toolchains), so it is possible there are sections of this file that are deprecated. If you find something incorrect or deprecated feel free to correct or modify it, but be aware that even seemingly innocuous changes to this file are quite likely to break other people's builds.

<<Anchor(makefileflags)>>'''Makefile.flags''' and '''tools/common/Makefile.flags''' contain a set of options that are applied globally at the top level. These generally contain compiler-specific options to discriminate between your target platforms. The shared settings in tools/common/Makefile.flags should be more than sufficient for most projects, but projects with more esoteric build requirements may need to use Makefile.flags to override or extend the shared settings. Most projects will have an empty Makefile.flags because there is almost always a more appropriate place to put an override.
