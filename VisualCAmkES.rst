= VisualCAmkES =
VisualCAmkES, also known as Visualisation of CAmkES, is a tool that allows one to visually understand a CAmkES system, how it works and how the different components are connected together. This makes understanding easier and more intuitive than traversing CAmkES code. An example of a graph generated by this tool is shown below

[Insert exemplar image]

Currently this program loads in a top-level camkes file and generates a graph from it. It also lets the user interact with the graph (zoom, pan and move nodes). <<BR>> 
The tool is a foundation for a CAmkES IDE. To create a CAmkES IDE, one must first be able to display a current CAmkES system and allow interaction. And that is what this project does. Since it was clear that this project should become an IDE in the future, the code has been written with that in mind.

The tool is written in python, for two reason. Python provides cross-platform compatibility, which doesnâ€™t require heavy, insecure Java virtual machine. The tool uses the CAmkES Ast and Parser API, and since this was written in python, this tool was also written in python.

VisualCAmkES is currently on the [[CAmkESNext]] branch only

'''Table of Contents''' 
<<TableOfContents()>>

== How to Install ==
Follow the instructions in [[CAmkESNext]] to obtain a copy of the CAmkES next repo. This tool should be found in [path/to/camkes-tool]/camkes/visualCAmkES.

Running the tool requires a few added dependencies: Graphviz and Qt.<<BR>> 
QT is a framework, which includes GUI, Network, Concurrency and other things. <<BR>> 
This install procedure assumes you have the rest of CAmkES working.

=== Installing Qt ===
For Debian/Ubuntu users, there are two ways to install this. The easy way is to apt-get the items. The "long" way is to build from source. <<BR>> 
For Mac (and presumably Windows, although this is untested for windows): the only way (other than macports/brew) is to build from source.

Qt is quite big, and the major of it is unnecessary. So I recommend to build from source for personal computers.

==== apt-get method ====
{{{#!highlight bash
sudo apt-get install python-pyqt5
sudo apt-get install python-pyqt5.qtsvg
}}}


==== from source method ====
{{{#!highlight bash
cd /some/temp/directory/like/Downloads
git clone git://code.qt.io/qt/qt5.git
cd qt5
git checkout 5.5

./init-repository --no-webkit --module-subset=qtbase,qtsvg

# Check where Qt will install - needed for PyQt5
./configure --help
# Have a look at where qt will be installed, for me it was installed in /usr/local/Qt-5.5.1

./configure -release -nomake examples -nomake tests -opensource -confirm-license  # add "-qt-xcb" for linux

make -j4 # This takes a long time (1-3 hrs)
make install
}}}
=== Installing Graphviz ===
{{{
sudo apt-get install graphviz
sudo pip install graphviz
sudo pip install pydotplus
}}}
For macs, to install graphviz (first step above), visit this website: http://www.ryandesign.com/graphviz/ , download the latest development (or stable as long as greater than version 16), and install the dmg. Pip will work on the mac.

=== Installing other dependencies ===
{{{
sudo pip install ansi2html
}}}
== How to use ==
This program is quite easy to use, yet quite powerful. To start the application, it would be:

{{{
python [path/to/camkes-tool/camkes]/visualCAmkES
}}}
=== Opening a File ===
To open a file, click File->Open. Then select a '''top-level camkes file'''. Your graph will load.

=== Manipulating the graph ===
In the right, you have a few buttons: <<BR>>
{{attachment:VisualCAmkES_userButtons.png|VisualCAmkES Corner UI buttons|align="left"}} The button's name should be self-explanatory. Autolayout will use graphviz to reposition the nodes into a "nice" format. In my experience, graphviz never gives a nice layout, but it does give a good starting point for you.

You can move the instances around by click & dragging each box. The connections will continually redraw as you move the box. There is a minimum distance to see the symbol for each connection.

=== Exporting and Saving ===
As you change the graph, '''the program automatically saves a .layout file''', which contains the current position of each box. This means that you can close the python application, and when you reopen it, your latest layout will appear.

You can export an image, into either PNG or SVG.
 1. Clicking Save Image or File->Export Image. 
 1. Choose either PNG or SVG from the combo-box (first input). 
   a. For PNG, resolutions is mandatory. 
   a. For SVG, no input is mandatory. 
 1. Click OK.
 1. Choose a place to save your file, and name your picture. 

The key-mappings are as follows:
||'''Task'''||'''Linux/Windows'''||'''Mac'''||
||Open      ||`Ctrl` + `O`||`Cmd` + `O`||
||Autolayout||`Ctrl` + `L`||`Cmd` + `L`||
||Export (Save) Image ||`Ctrl` + `E`||`Cmd` + `E`||
||Zoom In||`Ctrl` + `=`||`Cmd` + `=`||
||Zoom Out||`Ctrl` + `-`||`Cmd` + `-`||

== How it works ==
=== High level overview ===
